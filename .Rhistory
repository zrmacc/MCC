rate1 = c(0.1, 0.9),
or = 2
)
ORbyPi(
rate1 = c(0.25, 0.60),
or = 2
)
library(ggplot2)
# Rate in arm 1 for each stratum.
rate1 <- c(0.25, 0.60)
# Common odds ratio.
or <- 2
#' Rate in Arm 2.
#'
#' @param p Rate in Arm 1.
#' @param or Odds ratio.
Rate2 <- function(p, or) {
out <- (p * or) / (1 - p + p * or)
return(out)
}
#' Marginal rate.
#'
#' @param pi Proportion in stratum 1.
#' @param rates Numeric vector of rates.
MargRate <- function(pi, rates){
out <- pi * rates[1] + (1 - pi) * rates[2]
return(out)
}
#' Odds
#'
#' @param p Proportion.
Odds <- function(p) {
out <- p / (1 - p)
return(out)
}
#' Marginal odds ratio.
#'
#' @param pi Proportion in stratum 1.
#' @param rate1 Numeric vector of rates in arm 1.
#' @param or Common odds ratio.
#' @param log.scale Logical.
MargOR <- function(pi, rate1, or, log.scale = FALSE) {
p_marg <- MargRate(pi, rate1)
q_marg <- MargRate(pi, Rate2(rate1, or))
out <- Odds(q_marg) / Odds(p_marg)
if (log.scale) {
out <- log(out)
}
return(out)
}
#' Minimum MargOR
#'
#' @param rate1 Numeric vector of rates in arm 1.
#' @param or Common odds ratio.
MinOR <- function(rate1, or) {
# Objective.
Obj <- function(pi) {
out <- MargOR(pi = pi, rate1 = rate1, or = or, log.scale = TRUE)
return(out)
}
# Minimize.
min_log_or <- optim(
par = 0.001,
fn = Obj,
method = "L-BFGS-B",
lower = 0.001,
upper = 0.999
)
# Output.
out <- c(
"pi" = as.numeric(min_log_or$par),
"or" = as.numeric(exp(min_log_or$value))
)
return(out)
}
#' Candidate Bound
#'
#' @param rate1 Numeric vector of rates in arm 1.
#' @param or Common odds ratio.
LBound <- function(rate1, or) {
h <- function(p, or) {
out <- log(Rate2(p, or)) - (1 - Rate2(p, or)) - p + log(1 - p)
return(out)
}
h_rate <- h(rate1, or)
out <- exp(2 + max(h_rate))
return(out)
}
# -----------------------------------------------------------------------------
#' Marginal OR by mixing proportion.
#'
#' @param rate1 Rates in arm 1.
#' @param or Common odds ratio.
ORbyPi <- function(rate1, or) {
# Mixing proportions.
pi <- seq(from = 0.001, to = 0.999, by = 0.0005)
marg_or <- MargOR(pi = pi, rate1 = rate1, or = or)
df <- data.frame(
x = pi,
y = marg_or
)
q <- ggplot(data = df) +
theme_bw() +
geom_line(
aes(x = x, y = y),
color = "royalblue"
) +
labs(
x = expression(pi),
y = "Marginal OR"
)
show(q)
}
ORbyPi(
rate1 = c(0.25, 0.60),
or = 2
)
# -----------------------------------------------------------------------------
# Simulation.
# -----------------------------------------------------------------------------
or <- 2
reps <- 2e3
loop <- function(i) {
rate1 <- sort(runif(2))
lower <- MinOR(rate1 = rate1, or = or)
out <- data.frame(
"p1" = rate1[1],
"p2" = rate1[2],
"mid" = mean(rate1),
"pi" = lower[1],
"marg_p" = MargRate(lower[1], rate1),
"or" = lower[2],
"lb" = LBound(rate1, or)
)
return(out)
}
set.seed(1234)
sim <- lapply(seq_len(reps), loop)
sim <- do.call(rbind, sim)
plot(density(sim$pi))
plot(sim$mid, sim$marg_p)
head(sim)
head(sim)
max(sim$pi)
min(sim$pi)
sim[sim$pi == min(sim$pi), ]
sim[sim$pi == max(sim$pi), ]
29+18
install.packages("devtools")
install.packages("RNOmni")
install.packages("SurrogateRegression")
install.packages("optparse")
install.packages("mvnfast")
install.packages("mvnfast")
devtools::install_github(repo = "zrmacc/MatrixOps")
install.packages("Rcpp")
install.packages("plyr")
# Install dependencies.
install.packages("cowplot")
install.packages("data.table")
install.packages("devtools")
install.packages("ggplot2")
install.packages("mvnfast")
install.packages("optparse")
install.packages("plyr")
install.packages("Rcpp")
install.packages("RNOmni")
install.packages("SurrogateRegression")
# Purpose: Validate variance estimator.
# Updated: 2020-12-10
# Packages.
library(optparse)
library(MCC)
# -----------------------------------------------------------------------------
# Unpack simulation settings.
# -----------------------------------------------------------------------------
# Command line options.
opt_list <- list()
# Sample size.
opt <- make_option(c("--n"), type = "integer", help = "Patients", default = 50)
opt_list <- c(opt_list, opt)
# Truncation time.
opt <- make_option(c("--t"), type = "numeric", help = "Patients", default = 1)
opt_list <- c(opt_list, opt)
# Simulation replicates.
opt <- make_option(c("--reps"), type = "integer", help = "MC replicates", default = 10)
opt_list <- c(opt_list, opt)
# Output directory.
opt <- make_option(c("--out"), type = "character", help = "Output stem", default = "Test/")
opt_list <- c(opt_list, opt)
# Option parsing.
t0 <- proc.time()
parsed_opts <- OptionParser(option_list = opt_list)
params <- parse_args(object = parsed_opts)
# Output stem.
out_suffix <- paste0(
"N", params$n,
"_T", params$t,
".rds"
)
# -----------------------------------------------------------------------------
# Simulation.
# -----------------------------------------------------------------------------
Loop <- function(i) {
data <- GenData(
n1 = params$n,
n0 = params$n,
treatment_effect = 0,
risk_effect = 0,
covar_effect = 0,
tau = 10,
seed = NULL
)
stats <- AUC.Stats.Strat(
time = data$time,
status = data$status,
arm = data$arm,
idx = data$idx,
strata = rep(1, nrow(data)),
tau = params$t,
alpha = 0.05,
return_areas = TRUE
)
out <- c(
"Obs" = stats$contrasts$Observed,
"SE" = stats$contrasts$SE
)
names(out) <- c("diff", "ratio", "se_diff", "se_ratio")
return(out)
}
sim <- lapply(seq_len(params$reps), Loop)
sim <- do.call(rbind, sim)
# -----------------------------------------------------------------------------
# Summarize.
# -----------------------------------------------------------------------------
out <- data.frame(
"diff" = mean(sim[, 1]),
"ratio" = mean(sim[, 2]),
"evar_diff" = var(sim[, 1]),
"evar_ratio" = var(sim[, 2]),
"avar_diff" = mean(sim[, 3]^2),
"avar_ratio" = mean(sim[, 4]^2)
)
out_stem <- paste0(params$out, "Var")
if (!dir.exists(out_stem)) {dir.create(out_stem, recursive = TRUE)}
out_file <- paste0(out_stem, "/", out_suffix)
saveRDS(object = out, file = out_file)
# -----------------------------------------------------------------------------
# End
# -----------------------------------------------------------------------------
t1 <- proc.time()
show(t1-t0)
out <- expand.grid("N" = c(50, 100, 200, 500), "Time" = c(1, 2, 3, 4, 5))
out
data.table::fwrite(x = out, file = 'Documents/Lab/Survival/Recurrent Events/Variance/Config/VarConfig1.txt', sep = '\t')
# Add library path
library(devtools)
library(roxygen2)
# Creates package
setwd("~/Documents/Lab/Packages/MCC/MCC")
# devtools::create(path = 'MCC')
# save(mcc_data, file = 'data/mcc_data.RData')
# Use cpp
# pkgbuild::compile_dll(force=T);
## Documents package
devtools::document()
# Install
setwd("..")
devtools::install(pkg="MCC", reload = TRUE)
setwd("MCC/")
# Check package
# devtools::check()
devtools::check()
# Packages.
library(optparse)
library(MCC)
# -----------------------------------------------------------------------------
# Unpack simulation settings.
# -----------------------------------------------------------------------------
# Command line options.
opt_list <- list()
# Sample size.
opt <- make_option(c("--n"), type = "integer", help = "Patients", default = 50)
opt_list <- c(opt_list, opt)
# Truncation time.
opt <- make_option(c("--t"), type = "numeric", help = "Patients", default = 1)
opt_list <- c(opt_list, opt)
# Simulation replicates.
opt <- make_option(c("--reps"), type = "integer", help = "MC replicates", default = 10)
opt_list <- c(opt_list, opt)
# Permutation replicates.
opt <- make_option(c("--perm"), type = "integer", help = "Permutation replicates", default = 10)
opt_list <- c(opt_list, opt)
# Output directory.
opt <- make_option(c("--out"), type = "character", help = "Output stem", default = "Test/")
opt_list <- c(opt_list, opt)
# Option parsing.
t0 <- proc.time()
parsed_opts <- OptionParser(option_list = opt_list)
params <- parse_args(object = parsed_opts)
# Output stem.
out_suffix <- paste0(
"N", params$n,
"_T", params$t,
"_R", params$reps,
".rds"
)
params
? CompareStratAUCs
data <- GenData(
n1 = params$n,
n0 = params$n,
treatment_effect = 0,
risk_effect = 0,
covar_effect = 0,
tau = 10,
seed = NULL
)
stats <- CompareStratAUCs(
time = data$time,
status = data$staus,
arm = data$arm,
idx = data$idx,
tau = params$t,
boot = TRUE,
perm = TRUE,
reps = params$reps
)
params
data <- GenData(
n1 = params$n,
n0 = params$n,
treatment_effect = 0,
risk_effect = 0,
covar_effect = 0,
tau = 10,
seed = NULL
)
data
stats <- CompareStratAUCs(
time = data$time,
status = data$status,
arm = data$arm,
idx = data$idx,
tau = params$t,
boot = TRUE,
perm = TRUE,
reps = params$reps
)
params$reps = 20
stats <- CompareStratAUCs(
time = data$time,
status = data$status,
arm = data$arm,
idx = data$idx,
tau = params$t,
boot = TRUE,
perm = TRUE,
reps = params$reps
)
stats@Pvals
out <- stats@Pvals
out
out <- stats@Pvals$P
out
names(out) <- paste0(stats@Pvals$Method, "_", rep(c("diff", "ratio"), each = 3))
out
# Packages.
library(optparse)
library(MCC)
# -----------------------------------------------------------------------------
# Unpack simulation settings.
# -----------------------------------------------------------------------------
# Command line options.
opt_list <- list()
# Sample size.
opt <- make_option(c("--n"), type = "integer", help = "Patients", default = 50)
opt_list <- c(opt_list, opt)
# Truncation time.
opt <- make_option(c("--t"), type = "numeric", help = "Patients", default = 1)
opt_list <- c(opt_list, opt)
# Simulation replicates.
opt <- make_option(c("--reps"), type = "integer", help = "MC replicates", default = 10)
opt_list <- c(opt_list, opt)
# Permutation replicates.
opt <- make_option(c("--perm"), type = "integer", help = "Permutation replicates", default = 20)
opt_list <- c(opt_list, opt)
# Output directory.
opt <- make_option(c("--out"), type = "character", help = "Output stem", default = "Test/")
opt_list <- c(opt_list, opt)
# Option parsing.
t0 <- proc.time()
parsed_opts <- OptionParser(option_list = opt_list)
params <- parse_args(object = parsed_opts)
# Output stem.
out_suffix <- paste0(
"N", params$n,
"_T", params$t,
"_R", params$reps,
".rds"
)
# -----------------------------------------------------------------------------
# Simulation.
# -----------------------------------------------------------------------------
Loop <- function(i) {
data <- GenData(
n1 = params$n,
n0 = params$n,
treatment_effect = 0,
risk_effect = 0,
covar_effect = 0,
tau = 10,
seed = NULL
)
stats <- CompareStratAUCs(
time = data$time,
status = data$status,
arm = data$arm,
idx = data$idx,
tau = params$t,
boot = TRUE,
perm = TRUE,
reps = params$reps
)
out <- stats@Pvals$P
names(out) <- paste0(stats@Pvals$Method, "_", rep(c("diff", "ratio"), each = 3))
return(out)
}
sim <- lapply(seq_len(params$reps), Loop)
sim <- do.call(rbind, sim)
# -----------------------------------------------------------------------------
# Summarize.
# -----------------------------------------------------------------------------
out_stem <- paste0(params$out, "Variance")
if (!dir.exists(out_stem)) {dir.create(out_stem, recursive = TRUE)}
out_file <- paste0(out_stem, "/", out_suffix)
saveRDS(object = out, file = out_file)
params
# Purpose: Validate variance estimator.
# Updated: 2020-12-10
# Packages.
library(optparse)
library(MCC)
# -----------------------------------------------------------------------------
# Unpack simulation settings.
# -----------------------------------------------------------------------------
# Command line options.
opt_list <- list()
# Sample size.
opt <- make_option(c("--n"), type = "integer", help = "Patients", default = 50)
opt_list <- c(opt_list, opt)
# Truncation time.
opt <- make_option(c("--t"), type = "numeric", help = "Patients", default = 1)
opt_list <- c(opt_list, opt)
# Simulation replicates.
opt <- make_option(c("--reps"), type = "integer", help = "MC replicates", default = 10)
opt_list <- c(opt_list, opt)
# Permutation replicates.
opt <- make_option(c("--perm"), type = "integer", help = "Permutation replicates", default = 20)
opt_list <- c(opt_list, opt)
# Output directory.
opt <- make_option(c("--out"), type = "character", help = "Output stem", default = "Test/")
opt_list <- c(opt_list, opt)
# Option parsing.
t0 <- proc.time()
parsed_opts <- OptionParser(option_list = opt_list)
params <- parse_args(object = parsed_opts)
# Output stem.
out_suffix <- paste0(
"N", params$n,
"_T", params$t,
"_R", params$reps,
".rds"
)
# -----------------------------------------------------------------------------
# Simulation.
# -----------------------------------------------------------------------------
Loop <- function(i) {
data <- GenData(
n1 = params$n,
n0 = params$n,
treatment_effect = 0,
risk_effect = 0,
covar_effect = 0,
tau = 10,
seed = NULL
)
stats <- CompareStratAUCs(
time = data$time,
status = data$status,
arm = data$arm,
idx = data$idx,
tau = params$t,
boot = TRUE,
perm = TRUE,
reps = params$perm
)
out <- stats@Pvals$P
names(out) <- paste0(stats@Pvals$Method, "_", rep(c("diff", "ratio"), each = 3))
return(out)
}
sim <- lapply(seq_len(params$reps), Loop)
sim <- do.call(rbind, sim)
# -----------------------------------------------------------------------------
# Summarize.
# --------------------------
sim
out_stem <- paste0(params$out, "Size")
if (!dir.exists(out_stem)) {dir.create(out_stem, recursive = TRUE)}
out_file <- paste0(out_stem, "/", out_suffix)
out_file
cat(t1-t0, "\n")
