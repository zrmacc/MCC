arm = arm,
strata = strata,
covars
)
data
idx
data <- data.frame(idx, time, status, arm)
strata
is.null(strata) & !is.null(covars)
data <- cbind(data, covars)
data
head(data)
data <- data.frame(idx, time, status, arm)
if (is.null(covars) & is.null(strata)) {
data$strata <- 1
} else if (!is.null(covars) & is.null(strata)) {
data <- cbind(data, covars)
} else if(is.null(covars) & !is.null(strata)) {
data$strata <- strata
}
data
data[data$status == 2, ] = NULL
data[1(data$status == 2), ]
data[!(data$status == 2), ]
data = data[!(data$status == 2), ]
data
# Indicator of an observation-terminating event.
data$obs_end <- 1 * (data$status != 1)
# Sort data.
data <- data[order(data$idx, data$time, data$obs_end), ]
data
# Format data.
split_data <- split(x = data, f = data$idx)
df = split_data[[1]]
df
obs_end <- max(df$obs_end)
obs_end
obs_end
obs_end <- sum(df$obs_end)
obs_end
paste0("Subject ", unique(df$idx), " has multiple observation terminating events.")
n_row <- nrow(df)
n_row
df$time[df$obs_end == 1]
max(df$time[df$obs_end == 0])
df$time[df$obs_end == 1] < max(df$time[df$obs_end == 0])
paste0("Subject ", unique(df$idx), " has an event after an observation terminating event.")
out <- df
df$time[df$obs_end == 1]
obs_end == 0
obs_end = 0
df$time[df$obs_end == 1]
df
df = df[1, ]
df$time[df$obs_end == 1]
df
split_data[[2]]
df = split_data[[2]]
df
obs_end <- sum(df$obs_end)
out <- df
# Check for multiple observation terminating events.
if (obs_end > 1) {
stop(paste0("Subject ", unique(df$idx), " has multiple observation terminating events."))
}
obs_end
n_row <- nrow(df)
n_row
last_row <- df[n_row, ]
last_row
# Add censoring if no observation terminating event is present.
if (obs_end == 0) {
n_row <- nrow(df)
last_row <- df[n_row, ]
last_row$status <- 0
last_row$obs_end <- 1
out <- rbind(df, last_row)
}
out
obs_end <- sum(df$obs_end)
out <- df
# Check for multiple observation terminating events.
if (obs_end > 1) {
stop(paste0("Subject ", unique(df$idx), " has multiple observation terminating events."))
}
# Add censoring if no observation terminating event is present.
if (obs_end == 0) {
n_row <- nrow(df)
last_row <- df[n_row, ]
last_row$status <- 0
last_row$obs_end <- 1
out <- rbind(out, last_row)
}
out
FormatSubj <- function(df) {
obs_end <- sum(df$obs_end)
out <- df
# Check for multiple observation terminating events.
if (obs_end > 1) {
stop(paste0("Subject ", unique(df$idx), " has multiple observation terminating events."))
}
# Add censoring if no observation terminating event is present.
if (obs_end == 0) {
n_row <- nrow(df)
last_row <- df[n_row, ]
last_row$status <- 0
last_row$obs_end <- 1
out <- rbind(out, last_row)
}
return(out)
}
format_data <- lapply(split_data, FormatSubj)
final_data <- do.call(rbind, format_data)
final_data
rownames(final_data) <- NULL
finLa-dta
final_data
# Ensure each subject has a terminal event.
check <- tapply(final_data$obs_end, final_data$idx, max)
check
# Ensure each subject has exactly 1 terminal event.
check <- tapply(final_data$obs_end, final_data$idx, sum)
check
unique(check)
unique(check) == 1
# Ensure each subject has exactly 1 terminal event.
check <- tapply(final_data$obs_end, final_data$idx, sum)
if (unique(check) != ){
stop("Error formatting the data. Please ensure each subject has a single observation terminating event.")
}
# Ensure each subject has exactly 1 terminal event.
check <- tapply(final_data$obs_end, final_data$idx, sum)
if (unique(check) != 1){
stop("Error formatting the data. Please ensure each subject has a single observation terminating event.")
}
# Purpose: Format data.
#' Format Data for a Single Subject
#'
#' @param df Data.frame for a single subject.
#' @return Data.frame with an added censoring event.
FormatSubj <- function(df) {
obs_end <- sum(df$obs_end)
out <- df
# Check for multiple observation terminating events.
if (obs_end > 1) {
stop(paste0("Subject ", unique(df$idx), " has multiple observation terminating events."))
}
# Add censoring if no observation terminating event is present.
if (obs_end == 0) {
n_row <- nrow(df)
last_row <- df[n_row, ]
last_row$status <- 0
last_row$obs_end <- 1
out <- rbind(out, last_row)
}
return(out)
}
#' Format Data
#'
#' @param idx Unique subject index.
#' @param time Observation time.
#' @param status Status, coded as 0 for censoring, 1 for event, 2 for death.
#'   Note that subjects who are neither censored nor die are assumed to
#'   remain at risk throughout the observation period.
#' @param arm Arm, coded as 1 for treatment, 0 for reference.
#' @param covars Optional covariate matrix. Rows should correspond with the
#'   subject index `idx`. Factor and interaction terms should be expanded.
#' @param strata Optional stratification factor.
FormatData <- function(
idx,
time,
status,
arm,
covars,
strata
) {
data <- data.frame(idx, time, status, arm)
if (is.null(covars) & is.null(strata)) {
data$strata <- 1
} else if (!is.null(covars) & is.null(strata)) {
data <- cbind(data, covars)
} else if(is.null(covars) & !is.null(strata)) {
data$strata <- strata
}
# Indicator of an observation-terminating event.
data$obs_end <- 1 * (data$status != 1)
# Sort data.
data <- data[order(data$idx, data$time, data$obs_end), ]
# Format data.
split_data <- split(x = data, f = data$idx)
format_data <- lapply(split_data, FormatSubj)
final_data <- do.call(rbind, format_data)
rownames(final_data) <- NULL
# Ensure each subject has exactly 1 terminal event.
check <- tapply(final_data$obs_end, final_data$idx, sum)
if (unique(check) != 1){
stop("Error formatting the data. Please ensure each subject has a single observation terminating event.")
}
return(final_data)
}
# Purpose: Format data.
#' Format Data for a Single Subject
#'
#' @param df Data.frame for a single subject.
#' @return Data.frame with an added censoring event.
FormatSubj <- function(df) {
obs_end <- sum(df$obs_end)
out <- df
# Check for multiple observation terminating events.
if (obs_end > 1) {
stop(paste0("Subject ", unique(df$idx), " has multiple observation terminating events."))
}
# Add censoring if no observation terminating event is present.
if (obs_end == 0) {
n_row <- nrow(df)
last_row <- df[n_row, ]
last_row$status <- 0
last_row$obs_end <- 1
out <- rbind(out, last_row)
}
return(out)
}
#' Format Data
#'
#' @param idx Unique subject index.
#' @param time Observation time.
#' @param status Status, coded as 0 for censoring, 1 for event, 2 for death.
#'   Note that subjects who are neither censored nor die are assumed to
#'   remain at risk throughout the observation period.
#' @param arm Arm, coded as 1 for treatment, 0 for reference.
#' @param covars Optional covariate matrix. Rows should correspond with the
#'   subject index `idx`. Factor and interaction terms should be expanded.
#' @param strata Optional stratification factor.
FormatData <- function(
idx,
time,
status,
arm,
covars,
strata
) {
data <- data.frame(idx, time, status, arm)
if (is.null(covars) & is.null(strata)) {
data$strata <- 1
} else if (!is.null(covars) & is.null(strata)) {
data <- cbind(data, covars)
} else if(is.null(covars) & !is.null(strata)) {
data$strata <- strata
}
# Indicator of an observation-terminating event.
data$obs_end <- 1 * (data$status != 1)
# Sort data.
data <- data[order(data$idx, data$time, data$obs_end), ]
# Format data.
split_data <- split(x = data, f = data$idx)
format_data <- lapply(split_data, FormatSubj)
final_data <- do.call(rbind, format_data)
rownames(final_data) <- NULL
# Ensure each subject has exactly 1 terminal event.
check <- tapply(final_data$obs_end, final_data$idx, sum)
if (unique(check) != 1){
stop("Error formatting the data. Please ensure each subject has a single observation terminating event.")
}
return(final_data)
}
# Add library path
library(devtools)
library(roxygen2)
# Creates package
setwd("~/Documents/Lab/Packages/MCC/MCC")
# devtools::create(path = 'MCC')
# save(mcc_data, file = 'data/mcc_data.RData')
# Use cpp
# pkgbuild::compile_dll(force=T);
## Documents package
devtools::document()
# Install
setwd("..")
devtools::install(pkg="MCC", reload = TRUE)
setwd("MCC/")
# Check package
devtools::check()
# Source all files
SourceAll <- function() {
base_dir <- getwd()
setwd("~/Documents/Lab/Packages/MCC/MCC/R")
files <- dir()
r_files <- files[grepl(pattern = "*.R", x = files)]
sink <- sapply(r_files, source)
setwd(base_dir)
}
# Add library path
library(devtools)
library(roxygen2)
# Creates package
setwd("~/Documents/Lab/Packages/MCC/MCC")
# devtools::create(path = 'MCC')
# save(mcc_data, file = 'data/mcc_data.RData')
# Use cpp
# pkgbuild::compile_dll(force=T);
## Documents package
devtools::document()
# Install
setwd("..")
devtools::install(pkg="MCC", reload = TRUE)
setwd("MCC/")
# Check package
devtools::check()
# Source all files
SourceAll <- function() {
base_dir <- getwd()
setwd("~/Documents/Lab/Packages/MCC/MCC/R")
files <- dir()
r_files <- files[grepl(pattern = "*.R", x = files)]
sink <- sapply(r_files, source)
setwd(base_dir)
}
data <- MCC::GenData(
n1 = 100,
n2 = 100,
censoring_rate = 0.00,
death_rate = 0.00,
treatment_effect = 0.00
)
data <- MCC::GenData(
n1 = 100,
n0 = 100,
censoring_rate = 0.00,
death_rate = 0.00,
treatment_effect = 0.00
)
data <- MCC::GenData(
n1 = 100,
n0 = 100,
censoring_rate = 0.00,
death_rate = 0.00,
treatment_effect = 0.00,
tau = 4
)
fit <- CompareAUCs(
idx = data$idx,
time = data$time,
status = data$status,
arm = data$arm,
tau = 2
)
fit
# Generate data.
data <- MCC::GenData(
n1 = n1,
n0 = n0,
censoring_rate = censoring_rate,
death_rate = death_rate,
treatment_effect = log(0.75),
tau = 4
)
# Baseline.
fit0 <- CompareAUCs(
idx = data$idx,
time = data$time,
status = data$status,
arm = data$arm,
tau = 2
)
n1 = n0 = 11
death_rate = 0
censoring_rate = 0
# Generate data.
data <- MCC::GenData(
n1 = n1,
n0 = n0,
censoring_rate = censoring_rate,
death_rate = death_rate,
treatment_effect = log(0.75),
tau = 4
)
# Baseline.
fit0 <- CompareAUCs(
idx = data$idx,
time = data$time,
status = data$status,
arm = data$arm,
tau = 2
)
library(MCC)
# -----------------------------------------------------------------------------
#' @param n1 Subjects in treatment arm.
#' @param n0 Subjects in control arm.
#' @param censoring_rate Censoring rate.
#' @param death_rate Death rate.
TestE2E <- function(
n1,
n0,
censoring_rate,
death_rate
) {
# Generate data.
data <- MCC::GenData(
n1 = n1,
n0 = n0,
censoring_rate = censoring_rate,
death_rate = death_rate,
treatment_effect = 0.00,
tau = 4
)
# Baseline.
fit0 <- CompareAUCs(
idx = data$idx,
time = data$time,
status = data$status,
arm = data$arm,
tau = 2
)
show(fit0)
# Stratified.
fit1 <- CompareAUCs(
idx = data$idx,
time = data$time,
status = data$status,
arm = data$arm,
strata = data$strata,
tau = 2
)
show(fit1)
# Augmented.
fit2 <- CompareAUCs(
idx = data$idx,
time = data$time,
status = data$status,
arm = data$arm,
covars = data$covar,
tau = 2
)
show(fit2)
# Output.
out <- list(
baseline = fit0,
stratified = fit1,
augmented = fit2
)
return(out)
}
# -----------------------------------------------------------------------------
# No death or censoring.
# -----------------------------------------------------------------------------
out <- TestE2E(
n1 = 100,
n0 = 100,
censoring_rate = 0.00,
death_rate = 0.00
)
out <- TestE2E(
n1 = 100,
n0 = 100,
censoring_rate = 0.00,
death_rate = 0.50
)
out <- TestE2E(
n1 = 100,
n0 = 100,
censoring_rate = 0.50,
death_rate = 0.00
)
out <- TestE2E(
n1 = 100,
n0 = 100,
censoring_rate = 0.50,
death_rate = 0.50
)
# Add library path
library(devtools)
library(roxygen2)
# Creates package
setwd("~/Documents/Lab/Packages/MCC/MCC")
# devtools::create(path = 'MCC')
# save(mcc_data, file = 'data/mcc_data.RData')
# Use cpp
# pkgbuild::compile_dll(force=T);
## Documents package
devtools::document()
# Install
setwd("..")
devtools::install(pkg="MCC", reload = TRUE)
setwd("MCC/")
# Check package
devtools::check()
# Source all files
SourceAll <- function() {
base_dir <- getwd()
setwd("~/Documents/Lab/Packages/MCC/MCC/R")
files <- dir()
r_files <- files[grepl(pattern = "*.R", x = files)]
sink <- sapply(r_files, source)
setwd(base_dir)
}
df <- data.frame(
idx = c(1, 1, 1),
time = c(2, 3, 5),
status = c(1, 1, 1)
)
x = model.matrix(~ 0 + x + strata)
x = rnorm(n)
x = data$covar
x = model.matrix(~ 0 + x + strata)
strata
strata = data$strata
strata
x = model.matrix(~ 0 + x + strata)
x
head(data)
model.matrix(~ 0 + covar + stata, data = data)
model.matrix(~ 0 + covar + strata, data = data)
